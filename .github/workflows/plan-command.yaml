name: plan-command
on:
  repository_dispatch:
    types: [plan-command]
env:
  REGION: us-west-2
  TERRAGRUNT_LOG_LEVEL: info
  tf_version: 1.3.2
  tg_version: 0.39.1
  tf_working_dir: terraform
jobs:
  terraformPlan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    steps:
      - name: Get the environment name
        id: vars
        run: |
          env=${{ github.event.client_payload.slash_command.args.named.env }}
          if [[ -z "$env" ]]; then exit 1; fi
          echo "jump_env=$env" >> $GITHUB_ENV
        continue-on-error: true
      - name: Missing environment name notification
        if: steps.vars.outcome == 'failure'
        uses: peter-evans/create-or-update-comment@v2
        with:
          token: ${{ secrets.SLASH_COMMANDS_PAT }}
          repository: ${{ github.event.client_payload.github.payload.repository.full_name }}
          comment-id: ${{ github.event.client_payload.github.payload.comment.id }}
          body: |
            > Missing the `env` argument for the `/plan` command
            > Example: /plan env=[test/staging]
          reactions: '-1'
      - name: Missing environment name
        if: steps.vars.outcome == 'failure'
        run: exit 1
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.SLASH_COMMANDS_PAT }}
          ref: ${{ github.event.client_payload.pull_request.head.ref }}
      - name: Configure AWS credentials
        id: aws-creds
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets[format('AWS_TERRAFORM_ACCESS_KEY_ID_{0}', env.jump_env)] }}
          aws-secret-access-key: ${{ secrets[format('AWS_TERRAFORM_SECRET_ACCESS_KEY_{0}', env.jump_env)] }}
          aws-region: ${{ env.REGION }}
      - name: Get secrets
        run: |
          echo ${{ secrets[format('API_SECRETS_{0}', env.jump_env)] }} > ./${{ steps.vars.outputs.env }}.api.tmp
          base64 -d ./${{ env.jump_env }}.api.tmp > ./${{ env.tf_working_dir }}/env/${{ env.jump_env }}/api.secrets.${{ env.jump_env }}.yaml
          rm ./${{ env.jump_env }}.api.tmp
          echo ${{ secrets[format('WEB_SECRETS_{0}', env.jump_env)] }} > ./${{ steps.vars.outputs.env }}.web.tmp
          base64 -d ./${{ env.jump_env }}.web.tmp > ./${{ env.tf_working_dir }}/env/${{ env.jump_env }}/web.secrets.${{ env.jump_env }}.yaml
          rm ./${{ env.jump_env }}.web.tmp
      - name: Check secrets
        uses: mikefarah/yq@master
        id: check_secrets
        run: make keys
        working-directory: ${{ env.tf_working_dir }}
      - name: 'Terragrunt Init'
        id: init
        uses: the-commons-project/terragrunt-github-actions@master
        with:
          tf_actions_version: ${{ env.tf_version }}
          tg_actions_version: ${{ env.tg_version }}
          tf_actions_subcommand: 'init'
          tf_actions_working_dir: ${{ env.tf_working_dir }/env/${{ env.jump_env }}}
          tf_actions_comment: true
        env:
          GITHUB_TOKEN: ${{ secrets.SLASH_COMMANDS_PAT }}
      - name: 'Terragrunt Validate'
        id: validate
        uses: the-commons-project/terragrunt-github-actions@master
        with:
          tf_actions_version: ${{ env.tf_version }}
          tg_actions_version: ${{ env.tg_version }}
          tf_actions_binary: 'terraform'
          tf_actions_subcommand: 'run-all validate'
          tf_actions_working_dir: ${{ env.tf_working_dir }}/env/${{ env.jump_env }}
          tf_actions_comment: true
        env:
          GITHUB_TOKEN: ${{ secrets.SLASH_COMMANDS_PAT }}
      - name: 'Terragrunt Plan'
        id: plan
        uses: the-commons-project/terragrunt-github-actions@master
        with:
          tf_actions_version: ${{ env.tf_version }}
          tg_actions_version: ${{ env.tg_version }}
          tf_actions_subcommand: 'run-all plan'
          tf_actions_working_dir: ${{ env.tf_working_dir }}/env/${{ env.jump_env }}
          tf_actions_comment: true
        env:
          GITHUB_TOKEN: ${{ secrets.SLASH_COMMANDS_PAT }}
        continue-on-error: true
      - name: Terragrunt Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
